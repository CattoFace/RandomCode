// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Update
#pragma kernel Initiate
#pragma kernel Render

RWTexture2D<float4> Result;

uint evaporationConstant;
shared uint Resolution;
shared uint frame;
int mouseY;
int mouseX;
int whiteY;

struct Pixel
{
    uint color;
    int direction;
    uint moved;
};

shared RWStructuredBuffer<Pixel> pixels;
RWStructuredBuffer<uint> scores;

bool isCursor(uint2 pos)
{
    bool ans = false;
    if (mouseY >= 0 && abs(mouseY - (int) pos.y) < 2 && (int) pos.x == mouseX && pixels[mad(pos.x, Resolution, pos.y)].color < 5)
    {
        ans = true;
    }
    return ans;
}

uint rand(uint2 pos)
{
    uint seed = frame + 76.897898 * 48.789789 * cos(pos.x) * sin(pos.y) * 20.79797;
    seed = (seed ^ 61) ^ (seed >> 16);
    seed *= 9;
    seed = seed ^ (seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^ (seed >> 15);
    return seed;
}

bool validCoords(uint2 pos)
{
    bool ans = false;
    if (pos.x >= 0 && pos.y >= 0 && pos.x < Resolution && pos.y < Resolution)
    {
        ans = true;
    }
    return ans;
}

bool tryCondense(uint index,uint targetIndex)
{
    bool ans = false;
    uint color = pixels[index].color;
    uint targetColor = pixels[targetIndex].color;
    if (color + targetColor == 5)
    {
        uint condenseIndex = color < targetColor ? targetIndex : index;
        uint sourceIndex = color < targetColor ? index : targetIndex;
        uint moved;
        InterlockedCompareExchange(pixels[condenseIndex].moved, 0, 1, moved);
        if (!moved)
        {
            InterlockedAdd(scores[pixels[sourceIndex].color - 1], 3);
            pixels[condenseIndex].color = pixels[sourceIndex].color;
            ans = true;
        }
    }
    return ans;
}

bool tryEvaporate(uint2 pos)
{
    bool ans = false;
    uint r = rand(pos);
    uint index = mad(pos.x, Resolution, pos.y);
    if ((pixels[index].color == 6 && pos.x == Resolution - 1) || (pixels[index].color == 7 && (pos.x == 0 || isCursor(pos))))
    {
        pixels[index].color = 0;
        ans = true;
    }
    if (!ans && r % evaporationConstant < 1)
    {
        pixels[index].color += 2;
        ans = true;
    }
    
    return ans;
}
float intToColor(uint color)
{
    float ans = 0.5;
    switch (color)
    {
        case 1:
            ans = 0;
            break;
        case 2:
            ans = 1;
            break;
        case 3:
            ans = 0.3;
            break;
        case 4:
            ans = 0.7;
            break;
        case 6:
            ans = 0.15;
            break;
        case 7:
            ans = 0.85;
            break;
    }
    return ans;
}

bool tryMove(uint2 pos, int2 offset, bool allowParticleSwitch = true, bool evaporator = false)
{
    bool ans = false;
    uint index = mad(pos.x, Resolution, pos.y);
    uint2 targetPos = pos + offset;
    uint targetIndex = mad(targetPos.x, Resolution, targetPos.y);
    uint color = pixels[index].color;
    uint targetColor = pixels[targetIndex].color;
    if (validCoords(targetPos) && targetColor != color && targetColor < 5 && !tryCondense(index, targetIndex) && (targetColor == 0 || allowParticleSwitch))
    {
        uint moved;
        InterlockedCompareExchange(pixels[index].moved, 0, 1, moved);
        if (!moved)
        {
            uint targetMoved;
            InterlockedCompareExchange(pixels[targetIndex].moved, 0, 1, targetMoved);
            if (!targetMoved)
            {
                targetColor += evaporator && color + targetColor == 8 ? 2 : 0;
                pixels[targetIndex].color = pixels[index].color;
                pixels[index].color = targetColor;
            }
            if (targetMoved)
            {
                InterlockedCompareExchange(pixels[index].moved, 1, 0, moved);
            }
        }
    }
    return ans;
}

[numthreads(8,8,1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    uint index = mad(id.x, Resolution, id.y);
    if (!pixels[index].moved)
    {
        switch (pixels[index].color)
        {
            case 1: //black
                if (!tryEvaporate(id.xy))
                {
                    if (!tryMove(id.xy, int2(-1, 0)))
                    {
                        if (!tryMove(id.xy, int2(-1, pixels[index].direction)))
                        {
                            if (!tryMove(id.xy, int2(-1, -pixels[index].direction)))
                            {
                                if (!tryMove(id.xy, int2(0, pixels[index].direction), false))
                                {
                                    pixels[index].direction *= -1;
                                    tryMove(id.xy, int2(0, -pixels[index].direction), false);
                                }
                            }
                        }
                    }
                }
                break;
            case 2: //white
                if (!tryEvaporate(id.xy))
                {
                    if (!tryMove(id.xy, int2(1, 0)))
                    {
                        if (!tryMove(id.xy, int2(1, pixels[index].direction)))
                        {
                            if (!tryMove(id.xy, int2(1, -pixels[index].direction)))
                            {
                                if (!tryMove(id.xy, int2(0, pixels[index].direction), false))
                                {
                                    pixels[index].direction *= -1;
                                    tryMove(id.xy, int2(0, -pixels[index].direction), false);
                                }
                            }
                        }
                    }
                }
                break;
            case 3: //dark
                if (!tryMove(id.xy, int2(0, 1)))
                {
                    if (!tryMove(id.xy, int2(1, 1)))
                    {
                        if (!tryMove(id.xy, int2(-1, 1)))
                        {
                            if (!tryMove(id.xy, int2(1, 0), false))
                            {
                                pixels[index].direction *= -1;
                                tryMove(id.xy, int2(-1, 0), false);
                            }
                        }
                    }
                }
                
                break;
            case 4: //light
                if (!tryMove(id.xy, int2(0, -1)))
                {
                    if (!tryMove(id.xy, int2(-1, -1)))
                    {
                        if (!tryMove(id.xy, int2(1, -1)))
                        {
                            if (!tryMove(id.xy, int2(-1, 0), false))
                            {
                                pixels[index].direction *= -1;
                                tryMove(id.xy, int2(1, 0), false);
                            }
                        }
                    }
                }
                break;
            case 6: //whiteEvaporator
                if (!tryEvaporate(id.xy))
                {
                    tryMove(id.xy, uint2(1, 0), true, true);
                }
                break;
            case 7: //blackEvaporator
                if (!tryEvaporate(id.xy))
                {
                    tryMove(id.xy, uint2(-1, 0), true, true);
                }
                break;
        }
    }
}

[numthreads(8,8,1)]
void Initiate(uint3 id : SV_DispatchThreadID)
{
    float x = id.x / (float) Resolution;
    uint index = mad(id.x, Resolution, id.y);
    int color = x < 0.1875 ? 1 : x < 0.8125 ? 0 : 2;
    pixels[index].color = color;
    pixels[index].direction = 1;
    pixels[index].moved = 0;
}

[numthreads(8,8,1)]
void Render(uint3 id : SV_DispatchThreadID)
{
    uint index = mad(id.x, Resolution, id.y);
    pixels[index].moved = 0;
    uint color = pixels[index].color;
    float gradient = intToColor(color);
    gradient = isCursor(id.xy) ? gradient <= 0.5 ? 1 : 0 : gradient;
    Result[id.xy] = float4(gradient, gradient, gradient, 0);
}

